{"Default": "gaussian._xyz = gaussian._xyz\ngaussian._rotation = gaussian._rotation\ngaussian._scaling = gaussian._scaling\ngaussian._opacity = gaussian._opacity\ngaussian._features_dc = gaussian._features_dc\ngaussian._features_rest = gaussian._features_rest\nself.bg_color[:] = 0\n", "Point Cloud": "gaussian._xyz = gaussian._xyz\ngaussian._rotation = gaussian._rotation\ngaussian._scaling = gaussian._scaling*0 - 8\ngaussian._opacity = gaussian._opacity*0 + 10\ngaussian._features_dc = gaussian._features_dc\ngaussian._features_rest = gaussian._features_rest\nself.bg_color[:] = 0\n", "Only SH": "gaussian._xyz = gaussian._xyz\ngaussian._rotation = gaussian._rotation\ngaussian._scaling = gaussian._scaling\ngaussian._opacity = gaussian._opacity\ngaussian._features_dc = gaussian._features_dc * 0\ngaussian._features_rest = gaussian._features_rest\nself.bg_color[:] = 1\n", "Mask Sphere": "mask = torch.linalg.norm(gaussian._xyz, dim=-1) < slider.x\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 1\n", "Mask Small Gaussians": "mask = torch.linalg.norm(gaussian._scaling, dim=-1) < slider.x * 2\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 1\n", "Filter Opacity": "mask = torch.linalg.norm(gaussian._opacity, dim=-1) < slider.x\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 1\n", "Highlight Large Gaussians": "mask = torch.linalg.norm(gaussian._scaling, dim=-1) < slider.x\n\ngaussian._features_dc[mask] = gaussian._features_dc[mask] * 0 + torch.tensor([1, 0 ,0], device=\"cuda\")\n\nself.bg_color[:] = 1\n", "Sin(xyz)": "gaussian._xyz = torch.sin(gaussian._xyz/3+slider.x) + gaussian._xyz\n\n", "Random Colors": "torch.manual_seed(0)\ngaussian._features_dc = torch.rand_like(gaussian._features_dc) * 4 - 2\ngaussian._features_rest = gaussian._features_rest * 0\n", "Recoloring": "selected_color = torch.tensor([slider.r, slider.g, slider.b], device=\"cuda\")\n\ngaussian._xyz = gaussian._xyz\ngaussian._rotation = gaussian._rotation\ngaussian._scaling = gaussian._scaling\ngaussian._opacity = gaussian._opacity\ngaussian._features_dc = gaussian._features_dc + selected_color\ngaussian._features_rest = gaussian._features_rest\nself.bg_color[:] = 0\n", "one isotropic": "mask = torch.zeros(gaussian._scaling.shape[0], dtype=torch.bool, device=gaussian._scaling.device)\nmask[0] = True\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._xyz *= 0\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._scaling *= 0\ngaussian._scaling += 0.1\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 0", "one gaussian 2": "mask = torch.zeros(gaussian._scaling.shape[0], dtype=torch.bool, device=gaussian._scaling.device)\nmask[0] = True\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._xyz *= 0\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._scaling[0] *= 0\ngaussian._scaling[0] += 0.1\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._opacity[0] = 1\n\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_dc[0] *= 0\ngaussian._features_rest = gaussian._features_rest[mask]\ngaussian._features_rest[0] *= 0\nself.bg_color[:] = 0", "anisotropic one": "mask = torch.zeros(gaussian._scaling.shape[0], dtype=torch.bool, device=gaussian._scaling.device)\nmask[0] = True\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._xyz *= 0\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._scaling[0] *= 0.2\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._opacity[0] = 1\n\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_dc[0] *= 0\ngaussian._features_rest = gaussian._features_rest[mask]\ngaussian._features_rest[0] *= 0\nself.bg_color[:] = 0", "testing 1": "mask = torch.linalg.norm(gaussian._scaling, dim=-1) < slider.x * 2\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._opacity *= 0.\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_dc *= 0.\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 1\n", "scaling one": "mask = torch.zeros(gaussian._scaling.shape[0], dtype=torch.bool, device=gaussian._scaling.device)\nmask[0] = True\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._xyz *= 0\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._scaling[:, 0] = 0.1\ngaussian._scaling[:, 1] = 0.1\ngaussian._scaling[:, 2] = 0.1\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._opacity[0] = 1\n\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_dc[0] *= 0\ngaussian._features_rest = gaussian._features_rest[mask]\ngaussian._features_rest[0] *= 0\nself.bg_color[:] = 0", "anisotropic x quaternion identity": "mask = torch.zeros(gaussian._scaling.shape[0], dtype=torch.bool, device=gaussian._scaling.device)\nmask[0] = True\n\ngaussian._xyz = gaussian._xyz[mask]\ngaussian._xyz *= 0\ngaussian._rotation = gaussian._rotation[mask]\ngaussian._rotation *= 0.\ngaussian._rotation[0] = torch.tensor([0.,0.,0.,1.])\ngaussian._scaling = gaussian._scaling[mask]\ngaussian._scaling *= 0\ngaussian._scaling[:, 0] += 1.\ngaussian._opacity = gaussian._opacity[mask]\ngaussian._features_dc = gaussian._features_dc[mask]\ngaussian._features_rest = gaussian._features_rest[mask]\nself.bg_color[:] = 0"}